$Hue
	=	static
$Saturation
	=	static
$Luminosity
	=	static


$TempHue
	=	$Hue / 6
$Temp01
	=	if($Luminosity < 0.5, $Luminosity * ($Saturation + 1), ($Luminosity + $Saturation) - ($Luminosity * $Saturation))
$Temp02
	=	($Luminosity * 2) - $Temp01


$Red01
	=	$TempHue + (1/3)
$Green01
	=	$TempHue
$Blue01
	=	$TempHue - (1/3)


$Red02
	=	if($Red01 < 0, $Red01 + 1, if($Red01 > 1, $Red01 - 1, $Red01))
$Green02
	=	if($Green01 < 0, $Green01 + 1, if($Green01 > 1, $Green01 - 1, $Green01))
$Blue02
	=	if($Blue01 < 0, $Blue01 + 1, if($Blue01 > 1, $Blue01 - 1, $Blue01))


$Red03
	=	if($Red02 * 6 < 1, $Temp02 + ($Temp01 - $Temp02) * 6 * $Red02, if($Red02 * 2 < 1, $Temp01, if($Red02 * 3 < 2, $Temp02 + ($Temp01 - $Temp02) * (2/3 - $Red02) * 6, $Temp02)))
$Green03
	=	if($Green02 * 6 < 1, $Temp02 + ($Temp01 - $Temp02) * 6 * $Green02, if($Green02 * 2 < 1, $Temp01, if($Green02 * 3 < 2, $Temp02 + ($Temp01 - $Temp02) * (2/3 - $Green02) * 6, $Temp02)))
$Blue03
	=	if($Blue02 * 6 < 1, $Temp02 + ($Temp01 - $Temp02) * 6 * $Blue02, if($Blue02 * 2 < 1, $Temp01, if($Blue02 * 3 < 2, $Temp02 + ($Temp01 - $Temp02) * (2/3 - $Blue02) * 6, $Temp02)))


$RedFinal
	=	if($Saturation = 0, DEC2OCT(ROUND($Luminosity * 255)), DEC2OCT(ROUND($Red03 * 255)))
$GreenFinal
	=	if($Saturation = 0, DEC2OCT(ROUND($Luminosity * 255)), DEC2OCT(ROUND($Green03 * 255)))
$BlueFinal
	=	if($Saturation = 0, DEC2OCT(ROUND($Luminosity * 255)), DEC2OCT(ROUND($Blue03 * 255)))


public Color ToRGB()
{
	if ($Saturation == 0)
	{
		$RedFinal = DEC2OCT(ROUND($Luminosity * 255))
		$GreenFinal = DEC2OCT(ROUND($Luminosity * 255))
		$BlueFinal = DEC2OCT(ROUND($Luminosity * 255))
	}
	else
	{
		double $Temp01, $Temp02
		double $TempHue = $Hue / 6

		if ($Luminosity < 0.5)
		{
			$Temp01 = $Luminosity * (1 + $Saturation)
		}
		else
		{
			$Temp01 = ($Luminosity + $Saturation) - ($Luminosity * $Saturation)
		}

		$Temp02 = 2 * $Luminosity - $Temp01

		double $Red01, $Green01, $Blue01
		$Red01 = $TempHue + (1/3)
		$Green01 = $TempHue
		$Blue01 = $TempHue - (1/3)





		if ($Red01 < 0) $Red02 += 1
		else
		if ($Red01 > 1) $Red02 -= 1

		if ($Red02 * 6 < 1) $Red03 = $Temp02 + ($Temp01 - $Temp02) * 6 * $Red02
		else
		if ($Red02 * 2 < 1) $Red03 = $Temp01
		else
		if ($Red02 * 3 < 2) $Red03 = $Temp02 + ($Temp01 - $Temp02) * (2/3 - $Red02) * 6




		$RedFinal = DEC2OCT(ROUND($Red03 * 255))
		$GreenFinal = DEC2OCT(ROUND($Green03 * 255))
		$BlueFinal = DEC2OCT(ROUND($Blue03 * 255))
	}
}


public Color ToRGB()
{
	byte r, g, b;
	if (Saturation == 0)
	{
		r = (byte)Math.Round(Luminosity * 255d);
		g = (byte)Math.Round(Luminosity * 255d);
		b = (byte)Math.Round(Luminosity * 255d);
	}
	else
	{
		double t1, t2;
		double th = Hue / 6.0d;

		if (Luminosity < 0.5d)
		{
			t2 = Luminosity * (1d + Saturation);
		}
		else
		{
			t2 = (Luminosity + Saturation) - (Luminosity * Saturation);
		}
		t1 = 2d * Luminosity - t2;

		double tr, tg, tb;
		tr = th + (1.0d / 3.0d);
		tg = th;
		tb = th - (1.0d / 3.0d);

		tr = ColorCalc(tr, t1, t2);
		tg = ColorCalc(tg, t1, t2);
		tb = ColorCalc(tb, t1, t2);
		r = (byte)Math.Round(tr * 255d);
		g = (byte)Math.Round(tg * 255d);
		b = (byte)Math.Round(tb * 255d);
	}
	return Color.FromArgb(r, g, b);
}
private static double ColorCalc(double c, double t1, double t2)
{

	if (c < 0) c += 1d;
	if (c > 1) c -= 1d;
	if (6.0d * c < 1.0d) return t1 + (t2 - t1) * 6.0d * c;
	if (2.0d * c < 1.0d) return t2;
	if (3.0d * c < 2.0d) return t1 + (t2 - t1) * (2.0d / 3.0d - c) * 6.0d;
	return t1;
}


